{
  "name": "coc-tailwind-intellisense",
  "version": "0.6.0",
  "description": "Tailwind CSS Intellisense for coc.nvim",
  "author": "Rodrigo C. Guzm√°n <rodrigopcg@gmail.com>",
  "contributors": [
    "Nicolas Vasquez <nicolas.vasquez.t@usach.cl>"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "tailwind",
    "tailwindcss",
    "css",
    "intellisense",
    "autocomplete"
  ],
  "engines": {
    "coc": "^0.0.70"
  },
  "scripts": {
    "clean": "rimraf lib",
    "watch": "webpack --watch",
    "build": "webpack",
    "prepare": "npm run clean && npm run build",
    "prepare:server": "npm run bootstrap-server && npm run build-server && npm run minify-server",
    "bootstrap-server": "cd intellisense && npm install && npm run bootstrap",
    "build-server": "cd intellisense && npx lerna run build && cp -r packages/vscode-tailwindcss/dist/server/ ../",
    "minify-server": "glob-exec --foreach --parallel \"server/**/*.js\" -- \"terser {{file}} --compress --mangle --output {{file.toString()}}\""
  },
  "activationEvents": [
    "workspaceContains:**/tailwind.js",
    "workspaceContains:**/tailwind.config.js",
    "workspaceContains:**/tailwind-config.js",
    "workspaceContains:**/.tailwindrc.js"
  ],
  "contributes": {
    "configuration": {
      "title": "Tailwind CSS IntelliSense",
      "properties": {
        "tailwindCSS.enable": {
          "type": "boolean",
          "default": true
        },
        "tailwindCSS.emmetCompletions": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`"
        },
        "tailwindCSS.includeLanguages": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "markdownDescription": "Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`"
        },
        "tailwindCSS.colorDecorators": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",
          "scope": "language-overridable"
        },
        "tailwindCSS.validate": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.cssConflict": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "warning",
          "markdownDescription": "Class names on the same HTML element which apply the same CSS property or properties",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidApply": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidScreen": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidVariant": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidConfigPath": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.invalidTailwindDirective": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "error",
          "markdownDescription": "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",
          "scope": "language-overridable"
        },
        "tailwindCSS.lint.recommendedVariantOrder": {
          "type": "string",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "default": "warning",
          "markdownDescription": "Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)",
          "scope": "language-overridable"
        },
        "tailwindCSS.experimental.classRegex": {
          "type": "array",
          "scope": "language-overridable"
        },
        "tailwindCSS.showPixelEquivalents": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Show `px` equivalents for `rem` CSS values."
        },
        "tailwindCSS.rootFontSize": {
          "type": "number",
          "default": 16,
          "markdownDescription": "Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`."
        }
      }
    }
  },
  "dependencies": {
    "@vercel/ncc": "^0.29.2",
    "glob-exec": "^0.1.1",
    "lodash": "^4.17.20",
    "mitt": "^1.2.0",
    "vscode-languageclient": "^7.0.0",
    "vscode-languageserver": "^7.0.0",
    "vscode-languageserver-protocol": "^3.16.0",
    "vscode-languageserver-textdocument": "^1.0.1"
  },
  "devDependencies": {
    "@types/node": "^10.12.0",
    "@typescript-eslint/eslint-plugin": "^2.30.0",
    "@typescript-eslint/parser": "^2.30.0",
    "coc.nvim": "^0.0.80",
    "dset": "^2.0.1",
    "eslint": "^6.8.0",
    "npm-run-all": "^4.1.5",
    "postcss": "^7.0.27",
    "postcss-selector-parser": "^6.0.2",
    "rimraf": "^3.0.2",
    "ts-loader": "^7.0.5",
    "typescript": "^4.3.5",
    "webpack": "^4.43.0",
    "webpack-cli": "^3.3.11"
  }
}
